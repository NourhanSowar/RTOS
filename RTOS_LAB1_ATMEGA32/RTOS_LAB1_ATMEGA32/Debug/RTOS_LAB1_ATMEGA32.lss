
RTOS_LAB1_ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000e02  00000e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c5  00800074  00800074  00000eaa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002473  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd9  00000000  00000000  00003593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001333  00000000  00000000  0000436c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  000056a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb6  00000000  00000000  00005bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001789  00000000  00000000  00006866  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007fef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 33       	cpi	r26, 0x39	; 57
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 03 	call	0x642	; 0x642 <main>
  8a:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  98:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  9c:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
  a0:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
  a4:	c9 01       	movw	r24, r18
  a6:	8c 0f       	add	r24, r28
  a8:	9d 1f       	adc	r25, r29
  aa:	88 35       	cpi	r24, 0x58	; 88
  ac:	42 e0       	ldi	r20, 0x02	; 2
  ae:	94 07       	cpc	r25, r20
  b0:	58 f4       	brcc	.+22     	; 0xc8 <pvPortMalloc+0x36>
  b2:	28 17       	cp	r18, r24
  b4:	39 07       	cpc	r19, r25
  b6:	58 f4       	brcc	.+22     	; 0xce <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  b8:	e9 01       	movw	r28, r18
  ba:	ca 58       	subi	r28, 0x8A	; 138
  bc:	df 4f       	sbci	r29, 0xFF	; 255
			xNextFreeByte += xWantedSize;			
  be:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
  c2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <pvPortMalloc+0x40>
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
  d2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
  d6:	ce 01       	movw	r24, r28
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  de:	08 95       	ret

000000e0 <enableTrigger>:
//   data changes.
////////////////////////////////////////////////////////////////////
void enableTrigger(void)
{

	CLR_BIT(PORTB,2);
  e0:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <enableTrigger+0x6>
  ea:	00 c0       	rjmp	.+0      	; 0xec <enableTrigger+0xc>
  ec:	00 00       	nop
	
	_delay_ms(1);

	SET_BIT(PORTB,2);
  ee:	c2 9a       	sbi	0x18, 2	; 24
  f0:	8b ed       	ldi	r24, 0xDB	; 219
  f2:	95 e0       	ldi	r25, 0x05	; 5
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <enableTrigger+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <enableTrigger+0x1a>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <lcd_sendCommand>:
		
}


void lcd_sendCommand(unsigned char cmd)
{
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
	LOW_NIBBLE(low_nibble,cmd);

	CLR_BIT(PORTB,0); // to enable command mode 
 102:	c0 98       	cbi	0x18, 0	; 24
	CLR_BIT(PORTB,1); // write signal to lcd 
 104:	c1 98       	cbi	0x18, 1	; 24

	PORTB &=0x0f;
 106:	88 b3       	in	r24, 0x18	; 24
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	88 bb       	out	0x18, r24	; 24
	PORTB |=high_nibble;// to send high nibble command  
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	9c 2f       	mov	r25, r28
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 bb       	out	0x18, r24	; 24
	enableTrigger(); // triggre lcd enable 
 116:	0e 94 70 00 	call	0xe0	; 0xe0 <enableTrigger>

	PORTB &=0x0f;
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	88 bb       	out	0x18, r24	; 24
	PORTB |=low_nibble; // to send low nibble command 
 120:	88 b3       	in	r24, 0x18	; 24
 122:	c2 95       	swap	r28
 124:	c0 7f       	andi	r28, 0xF0	; 240
 126:	c8 2b       	or	r28, r24
 128:	c8 bb       	out	0x18, r28	; 24
	enableTrigger();
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <enableTrigger>

}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_init>:
//							 and pinB.0 to pinB.2 o/p for control pins 
//////////////////////////////////////////////////////////////////////////////////////
void lcd_init(void)
{

	DDRB=0xff; // init port B as O/P port 
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	87 bb       	out	0x17, r24	; 23
	PORTB=0x04; // activate LCD enable 
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	88 bb       	out	0x18, r24	; 24

	lcd_sendCommand(0x33); // 4-bit mode 
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_sendCommand>
	lcd_sendCommand (0x32);
 140:	82 e3       	ldi	r24, 0x32	; 50
 142:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_sendCommand>
	lcd_sendCommand (0x28);
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_sendCommand>



	lcd_sendCommand(0x0c); // turn on lcd 
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_sendCommand>
 152:	08 95       	ret

00000154 <lcd_displayChar>:
	enableTrigger();

}

void lcd_displayChar (unsigned char data)
{
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24

	unsigned char high_nibble , low_nibble ;

	SET_BIT(PORTB,0); //  enable data mode 
 158:	c0 9a       	sbi	0x18, 0	; 24
	CLR_BIT(PORTB,1); // activate lcd write 
 15a:	c1 98       	cbi	0x18, 1	; 24

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
	
	PORTB &= 0x0f;
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	88 bb       	out	0x18, r24	; 24
	PORTB |=high_nibble;// to send high nibble data  
 162:	88 b3       	in	r24, 0x18	; 24
 164:	9c 2f       	mov	r25, r28
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 bb       	out	0x18, r24	; 24
	enableTrigger(); // triggre lcd enable 
 16c:	0e 94 70 00 	call	0xe0	; 0xe0 <enableTrigger>
	
	PORTB &=0x0f;
 170:	88 b3       	in	r24, 0x18	; 24
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	88 bb       	out	0x18, r24	; 24
	PORTB |=low_nibble; // to send low nibble data 
 176:	88 b3       	in	r24, 0x18	; 24
 178:	c2 95       	swap	r28
 17a:	c0 7f       	andi	r28, 0xF0	; 240
 17c:	c8 2b       	or	r28, r24
 17e:	c8 bb       	out	0x18, r28	; 24
	enableTrigger();
 180:	0e 94 70 00 	call	0xe0	; 0xe0 <enableTrigger>
	

}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char y , unsigned char x )
{
	unsigned char position = 0x80;
	 
	switch(y)
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	49 f0       	breq	.+18     	; 0x19e <lcd_gotoxy+0x16>
 18c:	28 f0       	brcs	.+10     	; 0x198 <lcd_gotoxy+0x10>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	49 f0       	breq	.+18     	; 0x1a4 <lcd_gotoxy+0x1c>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	51 f0       	breq	.+20     	; 0x1aa <lcd_gotoxy+0x22>
 196:	0c c0       	rjmp	.+24     	; 0x1b0 <lcd_gotoxy+0x28>
	{
		case 0:

			position=position+x;
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	86 0f       	add	r24, r22
					
		break;
 19c:	0a c0       	rjmp	.+20     	; 0x1b2 <lcd_gotoxy+0x2a>

		case 1:

			position=0xc0;
			position=position+x;
 19e:	80 ec       	ldi	r24, 0xC0	; 192
 1a0:	86 0f       	add	r24, r22

		break;
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <lcd_gotoxy+0x2a>

		case 2:

			position=position+x;
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	86 0f       	add	r24, r22

		break;
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <lcd_gotoxy+0x2a>

		case 3:
			position=position+x;
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	86 0f       	add	r24, r22
		break;
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <lcd_gotoxy+0x2a>
}


void lcd_gotoxy(unsigned char y , unsigned char x )
{
	unsigned char position = 0x80;
 1b0:	80 e8       	ldi	r24, 0x80	; 128
		break;
	
	
	}
	
	lcd_sendCommand(position); 	
 1b2:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_sendCommand>
 1b6:	08 95       	ret

000001b8 <lcd_clrScreen>:


void lcd_clrScreen(void)
{

	lcd_sendCommand(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_sendCommand>
 1be:	08 95       	ret

000001c0 <lcd_dispString>:

}


void lcd_dispString(char * ptr)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24

	while(* ptr!= '\0')
 1c6:	88 81       	ld	r24, Y
 1c8:	88 23       	and	r24, r24
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <lcd_dispString+0x18>
 1cc:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_displayChar(* ptr);
 1ce:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_displayChar>


void lcd_dispString(char * ptr)
{

	while(* ptr!= '\0')
 1d2:	89 91       	ld	r24, Y+
 1d4:	81 11       	cpse	r24, r1
 1d6:	fb cf       	rjmp	.-10     	; 0x1ce <lcd_dispString+0xe>
	
	}



}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <lcd_disp_string_xy>:

void lcd_disp_string_xy(char * ptr , int y , int x)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
 1e4:	86 2f       	mov	r24, r22

	lcd_gotoxy(y,x);
 1e6:	64 2f       	mov	r22, r20
 1e8:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_gotoxy>
	lcd_dispString(ptr);
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_dispString>

	


}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 1f8:	fc 01       	movw	r30, r24
 1fa:	03 96       	adiw	r24, 0x03	; 3
 1fc:	92 83       	std	Z+2, r25	; 0x02
 1fe:	81 83       	std	Z+1, r24	; 0x01
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	3f ef       	ldi	r19, 0xFF	; 255
 204:	34 83       	std	Z+4, r19	; 0x04
 206:	23 83       	std	Z+3, r18	; 0x03
 208:	96 83       	std	Z+6, r25	; 0x06
 20a:	85 83       	std	Z+5, r24	; 0x05
 20c:	90 87       	std	Z+8, r25	; 0x08
 20e:	87 83       	std	Z+7, r24	; 0x07
 210:	10 82       	st	Z, r1
 212:	08 95       	ret

00000214 <vListInitialiseItem>:
 214:	fc 01       	movw	r30, r24
 216:	11 86       	std	Z+9, r1	; 0x09
 218:	10 86       	std	Z+8, r1	; 0x08
 21a:	08 95       	ret

0000021c <vListInsertEnd>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	fc 01       	movw	r30, r24
 222:	db 01       	movw	r26, r22
 224:	21 81       	ldd	r18, Z+1	; 0x01
 226:	32 81       	ldd	r19, Z+2	; 0x02
 228:	e9 01       	movw	r28, r18
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	9b 81       	ldd	r25, Y+3	; 0x03
 22e:	13 96       	adiw	r26, 0x03	; 3
 230:	9c 93       	st	X, r25
 232:	8e 93       	st	-X, r24
 234:	12 97       	sbiw	r26, 0x02	; 2
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	92 81       	ldd	r25, Z+2	; 0x02
 23a:	15 96       	adiw	r26, 0x05	; 5
 23c:	9c 93       	st	X, r25
 23e:	8e 93       	st	-X, r24
 240:	14 97       	sbiw	r26, 0x04	; 4
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	9b 81       	ldd	r25, Y+3	; 0x03
 246:	ec 01       	movw	r28, r24
 248:	7d 83       	std	Y+5, r23	; 0x05
 24a:	6c 83       	std	Y+4, r22	; 0x04
 24c:	e9 01       	movw	r28, r18
 24e:	7b 83       	std	Y+3, r23	; 0x03
 250:	6a 83       	std	Y+2, r22	; 0x02
 252:	72 83       	std	Z+2, r23	; 0x02
 254:	61 83       	std	Z+1, r22	; 0x01
 256:	19 96       	adiw	r26, 0x09	; 9
 258:	fc 93       	st	X, r31
 25a:	ee 93       	st	-X, r30
 25c:	18 97       	sbiw	r26, 0x08	; 8
 25e:	80 81       	ld	r24, Z
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 83       	st	Z, r24
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 26a:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 26c:	a2 81       	ldd	r26, Z+2	; 0x02
 26e:	b3 81       	ldd	r27, Z+3	; 0x03
 270:	84 81       	ldd	r24, Z+4	; 0x04
 272:	95 81       	ldd	r25, Z+5	; 0x05
 274:	15 96       	adiw	r26, 0x05	; 5
 276:	9c 93       	st	X, r25
 278:	8e 93       	st	-X, r24
 27a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 27c:	a4 81       	ldd	r26, Z+4	; 0x04
 27e:	b5 81       	ldd	r27, Z+5	; 0x05
 280:	82 81       	ldd	r24, Z+2	; 0x02
 282:	93 81       	ldd	r25, Z+3	; 0x03
 284:	13 96       	adiw	r26, 0x03	; 3
 286:	9c 93       	st	X, r25
 288:	8e 93       	st	-X, r24
 28a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 28c:	a0 85       	ldd	r26, Z+8	; 0x08
 28e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	8d 91       	ld	r24, X+
 294:	9c 91       	ld	r25, X
 296:	12 97       	sbiw	r26, 0x02	; 2
 298:	e8 17       	cp	r30, r24
 29a:	f9 07       	cpc	r31, r25
 29c:	31 f4       	brne	.+12     	; 0x2aa <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 29e:	84 81       	ldd	r24, Z+4	; 0x04
 2a0:	95 81       	ldd	r25, Z+5	; 0x05
 2a2:	12 96       	adiw	r26, 0x02	; 2
 2a4:	9c 93       	st	X, r25
 2a6:	8e 93       	st	-X, r24
 2a8:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 2aa:	11 86       	std	Z+9, r1	; 0x09
 2ac:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 2ae:	8c 91       	ld	r24, X
 2b0:	81 50       	subi	r24, 0x01	; 1
 2b2:	8c 93       	st	X, r24
 2b4:	08 95       	ret

000002b6 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2b6:	31 e1       	ldi	r19, 0x11	; 17
 2b8:	fc 01       	movw	r30, r24
 2ba:	30 83       	st	Z, r19
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	22 e2       	ldi	r18, 0x22	; 34
 2c0:	20 83       	st	Z, r18
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	a3 e3       	ldi	r26, 0x33	; 51
 2c6:	a0 83       	st	Z, r26
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	60 83       	st	Z, r22
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	70 83       	st	Z, r23
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	10 82       	st	Z, r1
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	60 e8       	ldi	r22, 0x80	; 128
 2d8:	60 83       	st	Z, r22
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	10 82       	st	Z, r1
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	60 83       	st	Z, r22
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	60 83       	st	Z, r22
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	64 e0       	ldi	r22, 0x04	; 4
 2ee:	60 83       	st	Z, r22
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	60 83       	st	Z, r22
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	66 e0       	ldi	r22, 0x06	; 6
 2fa:	60 83       	st	Z, r22
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	67 e0       	ldi	r22, 0x07	; 7
 300:	60 83       	st	Z, r22
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	68 e0       	ldi	r22, 0x08	; 8
 306:	60 83       	st	Z, r22
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	69 e0       	ldi	r22, 0x09	; 9
 30c:	60 83       	st	Z, r22
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	60 e1       	ldi	r22, 0x10	; 16
 312:	60 83       	st	Z, r22
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	30 83       	st	Z, r19
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	32 e1       	ldi	r19, 0x12	; 18
 31c:	30 83       	st	Z, r19
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	33 e1       	ldi	r19, 0x13	; 19
 322:	30 83       	st	Z, r19
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	34 e1       	ldi	r19, 0x14	; 20
 328:	30 83       	st	Z, r19
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	35 e1       	ldi	r19, 0x15	; 21
 32e:	30 83       	st	Z, r19
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	36 e1       	ldi	r19, 0x16	; 22
 334:	30 83       	st	Z, r19
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	37 e1       	ldi	r19, 0x17	; 23
 33a:	30 83       	st	Z, r19
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	38 e1       	ldi	r19, 0x18	; 24
 340:	30 83       	st	Z, r19
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	39 e1       	ldi	r19, 0x19	; 25
 346:	30 83       	st	Z, r19
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	30 e2       	ldi	r19, 0x20	; 32
 34c:	30 83       	st	Z, r19
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	31 e2       	ldi	r19, 0x21	; 33
 352:	30 83       	st	Z, r19
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	20 83       	st	Z, r18
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	23 e2       	ldi	r18, 0x23	; 35
 35c:	20 83       	st	Z, r18
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	40 83       	st	Z, r20
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	50 83       	st	Z, r21
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	26 e2       	ldi	r18, 0x26	; 38
 36a:	20 83       	st	Z, r18
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	27 e2       	ldi	r18, 0x27	; 39
 370:	20 83       	st	Z, r18
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	28 e2       	ldi	r18, 0x28	; 40
 376:	20 83       	st	Z, r18
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	29 e2       	ldi	r18, 0x29	; 41
 37c:	20 83       	st	Z, r18
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	20 e3       	ldi	r18, 0x30	; 48
 382:	20 83       	st	Z, r18
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	21 e3       	ldi	r18, 0x31	; 49
 388:	20 83       	st	Z, r18
 38a:	86 97       	sbiw	r24, 0x26	; 38
 38c:	08 95       	ret

0000038e <xPortStartScheduler>:
 38e:	1b bc       	out	0x2b, r1	; 43
 390:	8c e7       	ldi	r24, 0x7C	; 124
 392:	8a bd       	out	0x2a, r24	; 42
 394:	8b e0       	ldi	r24, 0x0B	; 11
 396:	8e bd       	out	0x2e, r24	; 46
 398:	89 b7       	in	r24, 0x39	; 57
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	89 bf       	out	0x39, r24	; 57
 39e:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <pxCurrentTCB>
 3a2:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 3a6:	cd 91       	ld	r28, X+
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	dd 91       	ld	r29, X+
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	bf 90       	pop	r11
 3d8:	af 90       	pop	r10
 3da:	9f 90       	pop	r9
 3dc:	8f 90       	pop	r8
 3de:	7f 90       	pop	r7
 3e0:	6f 90       	pop	r6
 3e2:	5f 90       	pop	r5
 3e4:	4f 90       	pop	r4
 3e6:	3f 90       	pop	r3
 3e8:	2f 90       	pop	r2
 3ea:	1f 90       	pop	r1
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	08 95       	ret
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret

000003f8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	0f 92       	push	r0
 400:	1f 92       	push	r1
 402:	11 24       	eor	r1, r1
 404:	2f 92       	push	r2
 406:	3f 92       	push	r3
 408:	4f 92       	push	r4
 40a:	5f 92       	push	r5
 40c:	6f 92       	push	r6
 40e:	7f 92       	push	r7
 410:	8f 92       	push	r8
 412:	9f 92       	push	r9
 414:	af 92       	push	r10
 416:	bf 92       	push	r11
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
 440:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <pxCurrentTCB>
 444:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 448:	0d b6       	in	r0, 0x3d	; 61
 44a:	0d 92       	st	X+, r0
 44c:	0e b6       	in	r0, 0x3e	; 62
 44e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 450:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 454:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <pxCurrentTCB>
 458:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 45c:	cd 91       	ld	r28, X+
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	dd 91       	ld	r29, X+
 462:	de bf       	out	0x3e, r29	; 62
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	df 90       	pop	r13
 48a:	cf 90       	pop	r12
 48c:	bf 90       	pop	r11
 48e:	af 90       	pop	r10
 490:	9f 90       	pop	r9
 492:	8f 90       	pop	r8
 494:	7f 90       	pop	r7
 496:	6f 90       	pop	r6
 498:	5f 90       	pop	r5
 49a:	4f 90       	pop	r4
 49c:	3f 90       	pop	r3
 49e:	2f 90       	pop	r2
 4a0:	1f 90       	pop	r1
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4a8:	08 95       	ret

000004aa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	0f 92       	push	r0
 4b2:	1f 92       	push	r1
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 92       	push	r2
 4b8:	3f 92       	push	r3
 4ba:	4f 92       	push	r4
 4bc:	5f 92       	push	r5
 4be:	6f 92       	push	r6
 4c0:	7f 92       	push	r7
 4c2:	8f 92       	push	r8
 4c4:	9f 92       	push	r9
 4c6:	af 92       	push	r10
 4c8:	bf 92       	push	r11
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
 4f2:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <pxCurrentTCB>
 4f6:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 4fa:	0d b6       	in	r0, 0x3d	; 61
 4fc:	0d 92       	st	X+, r0
 4fe:	0e b6       	in	r0, 0x3e	; 62
 500:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 502:	0e 94 03 05 	call	0xa06	; 0xa06 <vTaskIncrementTick>
	vTaskSwitchContext();
 506:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 50a:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <pxCurrentTCB>
 50e:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 512:	cd 91       	ld	r28, X+
 514:	cd bf       	out	0x3d, r28	; 61
 516:	dd 91       	ld	r29, X+
 518:	de bf       	out	0x3e, r29	; 62
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	df 90       	pop	r13
 540:	cf 90       	pop	r12
 542:	bf 90       	pop	r11
 544:	af 90       	pop	r10
 546:	9f 90       	pop	r9
 548:	8f 90       	pop	r8
 54a:	7f 90       	pop	r7
 54c:	6f 90       	pop	r6
 54e:	5f 90       	pop	r5
 550:	4f 90       	pop	r4
 552:	3f 90       	pop	r3
 554:	2f 90       	pop	r2
 556:	1f 90       	pop	r1
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 55e:	08 95       	ret

00000560 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void  TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void  TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 560:	0e 94 55 02 	call	0x4aa	; 0x4aa <vPortYieldFromTick>
		asm volatile ( "reti" );
 564:	18 95       	reti

00000566 <vxtask1>:
void vxtask1 (void*pvParamter)
{
	
	for (;;)
	{
		lcd_clrScreen();
 566:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrScreen>
		for (i =0; i<7 ; i++  )
 56a:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <i+0x1>
 56e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <i>
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	50 e0       	ldi	r21, 0x00	; 0
		{
			//lcd_gotoxy(0,i);
			//lcd_dispString("hello");
			lcd_disp_string_xy("hello" , 0 , i);
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	82 e6       	ldi	r24, 0x62	; 98
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_disp_string_xy>
 582:	2f ef       	ldi	r18, 0xFF	; 255
 584:	80 e7       	ldi	r24, 0x70	; 112
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <vxtask1+0x22>
 590:	00 c0       	rjmp	.+0      	; 0x592 <vxtask1+0x2c>
 592:	00 00       	nop
			_delay_ms(100);
			
			lcd_clrScreen();
 594:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrScreen>
{
	
	for (;;)
	{
		lcd_clrScreen();
		for (i =0; i<7 ; i++  )
 598:	40 91 35 03 	lds	r20, 0x0335	; 0x800335 <i>
 59c:	50 91 36 03 	lds	r21, 0x0336	; 0x800336 <i+0x1>
 5a0:	4f 5f       	subi	r20, 0xFF	; 255
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255
 5a4:	50 93 36 03 	sts	0x0336, r21	; 0x800336 <i+0x1>
 5a8:	40 93 35 03 	sts	0x0335, r20	; 0x800335 <i>
 5ac:	47 30       	cpi	r20, 0x07	; 7
 5ae:	51 05       	cpc	r21, r1
 5b0:	14 f3       	brlt	.-60     	; 0x576 <vxtask1+0x10>
			
			lcd_clrScreen();
			
		}
		
		vTaskPrioritySet( xHANDLE1 , 1 );
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xHANDLE1>
 5b8:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xHANDLE1+0x1>
 5bc:	0e 94 65 04 	call	0x8ca	; 0x8ca <vTaskPrioritySet>
		vTaskPrioritySet( xHANDLE2 , 2 );
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <xHANDLE2>
 5c6:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <xHANDLE2+0x1>
 5ca:	0e 94 65 04 	call	0x8ca	; 0x8ca <vTaskPrioritySet>
		
	}
 5ce:	cb cf       	rjmp	.-106    	; 0x566 <vxtask1>

000005d0 <vxtask2>:
	for (;;)
	{
		lcd_clrScreen();
		for (i =0; i<7 ; i++  )
		{
			lcd_disp_string_xy("world" , 1 , 7-i);
 5d0:	c7 e0       	ldi	r28, 0x07	; 7
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
}
void vxtask2 (void*pvParamter)
{
	for (;;)
	{
		lcd_clrScreen();
 5d4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrScreen>
		for (i =0; i<7 ; i++  )
 5d8:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <i+0x1>
 5dc:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <i>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
		{
			lcd_disp_string_xy("world" , 1 , 7-i);
 5e4:	ae 01       	movw	r20, r28
 5e6:	48 1b       	sub	r20, r24
 5e8:	59 0b       	sbc	r21, r25
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	88 e6       	ldi	r24, 0x68	; 104
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_disp_string_xy>
 5f6:	2f ef       	ldi	r18, 0xFF	; 255
 5f8:	80 e7       	ldi	r24, 0x70	; 112
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	21 50       	subi	r18, 0x01	; 1
 5fe:	80 40       	sbci	r24, 0x00	; 0
 600:	90 40       	sbci	r25, 0x00	; 0
 602:	e1 f7       	brne	.-8      	; 0x5fc <vxtask2+0x2c>
 604:	00 c0       	rjmp	.+0      	; 0x606 <vxtask2+0x36>
 606:	00 00       	nop
			
			_delay_ms(100);
			
			lcd_clrScreen();
 608:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrScreen>
void vxtask2 (void*pvParamter)
{
	for (;;)
	{
		lcd_clrScreen();
		for (i =0; i<7 ; i++  )
 60c:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <i>
 610:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <i+0x1>
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <i+0x1>
 61a:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <i>
 61e:	87 30       	cpi	r24, 0x07	; 7
 620:	91 05       	cpc	r25, r1
 622:	04 f3       	brlt	.-64     	; 0x5e4 <vxtask2+0x14>
			lcd_clrScreen();
			
			
		}
		
		vTaskPrioritySet( xHANDLE1 , 2 );
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xHANDLE1>
 62a:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xHANDLE1+0x1>
 62e:	0e 94 65 04 	call	0x8ca	; 0x8ca <vTaskPrioritySet>
		vTaskPrioritySet( xHANDLE2 , 1 );
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <xHANDLE2>
 638:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <xHANDLE2+0x1>
 63c:	0e 94 65 04 	call	0x8ca	; 0x8ca <vTaskPrioritySet>
	}
 640:	c9 cf       	rjmp	.-110    	; 0x5d4 <vxtask2+0x4>

00000642 <main>:
/*tasks codes prototypes */
 
 void vxtask1 (void*pvParamter);
 void vxtask2 (void*pvParamter);
int main(void)
{
 642:	af 92       	push	r10
 644:	bf 92       	push	r11
 646:	cf 92       	push	r12
 648:	df 92       	push	r13
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
	
	lcd_init();
 650:	0e 94 99 00 	call	0x132	; 0x132 <lcd_init>
	
	xTaskCreate(vxtask1,NULL,85,NULL,2,&xHANDLE1);
 654:	a1 2c       	mov	r10, r1
 656:	b1 2c       	mov	r11, r1
 658:	c1 2c       	mov	r12, r1
 65a:	d1 2c       	mov	r13, r1
 65c:	0f 2e       	mov	r0, r31
 65e:	f7 e3       	ldi	r31, 0x37	; 55
 660:	ef 2e       	mov	r14, r31
 662:	f3 e0       	ldi	r31, 0x03	; 3
 664:	ff 2e       	mov	r15, r31
 666:	f0 2d       	mov	r31, r0
 668:	02 e0       	ldi	r16, 0x02	; 2
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	45 e5       	ldi	r20, 0x55	; 85
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	83 eb       	ldi	r24, 0xB3	; 179
 678:	92 e0       	ldi	r25, 0x02	; 2
 67a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <xTaskGenericCreate>
	
	xTaskCreate(vxtask2,NULL,85,NULL,1,&xHANDLE2);
 67e:	0f 2e       	mov	r0, r31
 680:	f3 e3       	ldi	r31, 0x33	; 51
 682:	ef 2e       	mov	r14, r31
 684:	f3 e0       	ldi	r31, 0x03	; 3
 686:	ff 2e       	mov	r15, r31
 688:	f0 2d       	mov	r31, r0
 68a:	01 e0       	ldi	r16, 0x01	; 1
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	45 e5       	ldi	r20, 0x55	; 85
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	88 ee       	ldi	r24, 0xE8	; 232
 69a:	92 e0       	ldi	r25, 0x02	; 2
 69c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <xTaskGenericCreate>
	
	vTaskStartScheduler();
 6a0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <vTaskStartScheduler>
		
	return 0;
    
}
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	bf 90       	pop	r11
 6b4:	af 90       	pop	r10
 6b6:	08 95       	ret

000006b8 <xTaskGenericCreate>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6b8:	4f 92       	push	r4
 6ba:	5f 92       	push	r5
 6bc:	6f 92       	push	r6
 6be:	7f 92       	push	r7
 6c0:	8f 92       	push	r8
 6c2:	9f 92       	push	r9
 6c4:	af 92       	push	r10
 6c6:	bf 92       	push	r11
 6c8:	cf 92       	push	r12
 6ca:	df 92       	push	r13
 6cc:	ef 92       	push	r14
 6ce:	ff 92       	push	r15
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	5c 01       	movw	r10, r24
 6da:	4b 01       	movw	r8, r22
 6dc:	ea 01       	movw	r28, r20
 6de:	29 01       	movw	r4, r18
 6e0:	81 e2       	ldi	r24, 0x21	; 33
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 6e8:	3c 01       	movw	r6, r24
 6ea:	00 97       	sbiw	r24, 0x00	; 0
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <xTaskGenericCreate+0x38>
 6ee:	db c0       	rjmp	.+438    	; 0x8a6 <__stack+0x47>
 6f0:	c1 14       	cp	r12, r1
 6f2:	d1 04       	cpc	r13, r1
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <xTaskGenericCreate+0x40>
 6f6:	d2 c0       	rjmp	.+420    	; 0x89c <__stack+0x3d>
 6f8:	ce 01       	movw	r24, r28
 6fa:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 6fe:	f3 01       	movw	r30, r6
 700:	90 8f       	std	Z+24, r25	; 0x18
 702:	87 8b       	std	Z+23, r24	; 0x17
 704:	00 97       	sbiw	r24, 0x00	; 0
 706:	21 f4       	brne	.+8      	; 0x710 <xTaskGenericCreate+0x58>
 708:	c3 01       	movw	r24, r6
 70a:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
 70e:	cb c0       	rjmp	.+406    	; 0x8a6 <__stack+0x47>
 710:	ae 01       	movw	r20, r28
 712:	65 ea       	ldi	r22, 0xA5	; 165
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <memset>
 71a:	21 97       	sbiw	r28, 0x01	; 1
 71c:	f3 01       	movw	r30, r6
 71e:	87 89       	ldd	r24, Z+23	; 0x17
 720:	90 8d       	ldd	r25, Z+24	; 0x18
 722:	c8 0f       	add	r28, r24
 724:	d9 1f       	adc	r29, r25
 726:	48 e0       	ldi	r20, 0x08	; 8
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	b4 01       	movw	r22, r8
 72c:	c3 01       	movw	r24, r6
 72e:	49 96       	adiw	r24, 0x19	; 25
 730:	0e 94 f0 06 	call	0xde0	; 0xde0 <strncpy>
 734:	f3 01       	movw	r30, r6
 736:	10 a2       	std	Z+32, r1	; 0x20
 738:	10 2f       	mov	r17, r16
 73a:	05 30       	cpi	r16, 0x05	; 5
 73c:	08 f0       	brcs	.+2      	; 0x740 <xTaskGenericCreate+0x88>
 73e:	14 e0       	ldi	r17, 0x04	; 4
 740:	f3 01       	movw	r30, r6
 742:	16 8b       	std	Z+22, r17	; 0x16
 744:	63 01       	movw	r12, r6
 746:	f2 e0       	ldi	r31, 0x02	; 2
 748:	cf 0e       	add	r12, r31
 74a:	d1 1c       	adc	r13, r1
 74c:	c6 01       	movw	r24, r12
 74e:	0e 94 0a 01 	call	0x214	; 0x214 <vListInitialiseItem>
 752:	c3 01       	movw	r24, r6
 754:	0c 96       	adiw	r24, 0x0c	; 12
 756:	0e 94 0a 01 	call	0x214	; 0x214 <vListInitialiseItem>
 75a:	f3 01       	movw	r30, r6
 75c:	71 86       	std	Z+9, r7	; 0x09
 75e:	60 86       	std	Z+8, r6	; 0x08
 760:	85 e0       	ldi	r24, 0x05	; 5
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	81 1b       	sub	r24, r17
 766:	91 09       	sbc	r25, r1
 768:	95 87       	std	Z+13, r25	; 0x0d
 76a:	84 87       	std	Z+12, r24	; 0x0c
 76c:	73 8a       	std	Z+19, r7	; 0x13
 76e:	62 8a       	std	Z+18, r6	; 0x12
 770:	a2 01       	movw	r20, r4
 772:	b5 01       	movw	r22, r10
 774:	ce 01       	movw	r24, r28
 776:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <pxPortInitialiseStack>
 77a:	f3 01       	movw	r30, r6
 77c:	91 83       	std	Z+1, r25	; 0x01
 77e:	80 83       	st	Z, r24
 780:	e1 14       	cp	r14, r1
 782:	f1 04       	cpc	r15, r1
 784:	19 f0       	breq	.+6      	; 0x78c <xTaskGenericCreate+0xd4>
 786:	f7 01       	movw	r30, r14
 788:	71 82       	std	Z+1, r7	; 0x01
 78a:	60 82       	st	Z, r6
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	0f 92       	push	r0
 792:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <uxCurrentNumberOfTasks>
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <uxCurrentNumberOfTasks>
 79c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <pxCurrentTCB>
 7a0:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 7a4:	89 2b       	or	r24, r25
 7a6:	a1 f5       	brne	.+104    	; 0x810 <xTaskGenericCreate+0x158>
 7a8:	70 92 30 03 	sts	0x0330, r7	; 0x800330 <pxCurrentTCB+0x1>
 7ac:	60 92 2f 03 	sts	0x032F, r6	; 0x80032f <pxCurrentTCB>
 7b0:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <uxCurrentNumberOfTasks>
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	d9 f5       	brne	.+118    	; 0x82e <xTaskGenericCreate+0x176>
 7b8:	c2 e0       	ldi	r28, 0x02	; 2
 7ba:	d3 e0       	ldi	r29, 0x03	; 3
 7bc:	0f 2e       	mov	r0, r31
 7be:	ff e2       	ldi	r31, 0x2F	; 47
 7c0:	ef 2e       	mov	r14, r31
 7c2:	f3 e0       	ldi	r31, 0x03	; 3
 7c4:	ff 2e       	mov	r15, r31
 7c6:	f0 2d       	mov	r31, r0
 7c8:	ce 01       	movw	r24, r28
 7ca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vListInitialise>
 7ce:	29 96       	adiw	r28, 0x09	; 9
 7d0:	ce 15       	cp	r28, r14
 7d2:	df 05       	cpc	r29, r15
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <xTaskGenericCreate+0x110>
 7d6:	89 ef       	ldi	r24, 0xF9	; 249
 7d8:	92 e0       	ldi	r25, 0x02	; 2
 7da:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vListInitialise>
 7de:	80 ef       	ldi	r24, 0xF0	; 240
 7e0:	92 e0       	ldi	r25, 0x02	; 2
 7e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vListInitialise>
 7e6:	83 ee       	ldi	r24, 0xE3	; 227
 7e8:	92 e0       	ldi	r25, 0x02	; 2
 7ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vListInitialise>
 7ee:	8a ed       	ldi	r24, 0xDA	; 218
 7f0:	92 e0       	ldi	r25, 0x02	; 2
 7f2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vListInitialise>
 7f6:	89 ef       	ldi	r24, 0xF9	; 249
 7f8:	92 e0       	ldi	r25, 0x02	; 2
 7fa:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <pxDelayedTaskList+0x1>
 7fe:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <pxDelayedTaskList>
 802:	80 ef       	ldi	r24, 0xF0	; 240
 804:	92 e0       	ldi	r25, 0x02	; 2
 806:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
 80a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <pxOverflowDelayedTaskList>
 80e:	0f c0       	rjmp	.+30     	; 0x82e <xTaskGenericCreate+0x176>
 810:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <xSchedulerRunning>
 814:	81 11       	cpse	r24, r1
 816:	0b c0       	rjmp	.+22     	; 0x82e <xTaskGenericCreate+0x176>
 818:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxCurrentTCB>
 81c:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 820:	86 89       	ldd	r24, Z+22	; 0x16
 822:	08 17       	cp	r16, r24
 824:	20 f0       	brcs	.+8      	; 0x82e <xTaskGenericCreate+0x176>
 826:	70 92 30 03 	sts	0x0330, r7	; 0x800330 <pxCurrentTCB+0x1>
 82a:	60 92 2f 03 	sts	0x032F, r6	; 0x80032f <pxCurrentTCB>
 82e:	f3 01       	movw	r30, r6
 830:	86 89       	ldd	r24, Z+22	; 0x16
 832:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <uxTopUsedPriority>
 836:	98 17       	cp	r25, r24
 838:	10 f4       	brcc	.+4      	; 0x83e <xTaskGenericCreate+0x186>
 83a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <uxTopUsedPriority>
 83e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <uxTaskNumber>
 842:	9f 5f       	subi	r25, 0xFF	; 255
 844:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <uxTaskNumber>
 848:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 84c:	98 17       	cp	r25, r24
 84e:	10 f4       	brcc	.+4      	; 0x854 <xTaskGenericCreate+0x19c>
 850:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <uxTopReadyPriority>
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	9c 01       	movw	r18, r24
 858:	22 0f       	add	r18, r18
 85a:	33 1f       	adc	r19, r19
 85c:	22 0f       	add	r18, r18
 85e:	33 1f       	adc	r19, r19
 860:	22 0f       	add	r18, r18
 862:	33 1f       	adc	r19, r19
 864:	82 0f       	add	r24, r18
 866:	93 1f       	adc	r25, r19
 868:	b6 01       	movw	r22, r12
 86a:	8e 5f       	subi	r24, 0xFE	; 254
 86c:	9c 4f       	sbci	r25, 0xFC	; 252
 86e:	0e 94 0e 01 	call	0x21c	; 0x21c <vListInsertEnd>
 872:	0f 90       	pop	r0
 874:	0f be       	out	0x3f, r0	; 63
 876:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <xSchedulerRunning>
 87a:	88 23       	and	r24, r24
 87c:	59 f0       	breq	.+22     	; 0x894 <__stack+0x35>
 87e:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxCurrentTCB>
 882:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 886:	86 89       	ldd	r24, Z+22	; 0x16
 888:	80 17       	cp	r24, r16
 88a:	30 f4       	brcc	.+12     	; 0x898 <__stack+0x39>
 88c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <vPortYield>
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	0a c0       	rjmp	.+20     	; 0x8a8 <__stack+0x49>
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <__stack+0x49>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <__stack+0x49>
 89c:	fc 01       	movw	r30, r24
 89e:	d0 8e       	std	Z+24, r13	; 0x18
 8a0:	c7 8a       	std	Z+23, r12	; 0x17
 8a2:	c6 01       	movw	r24, r12
 8a4:	35 cf       	rjmp	.-406    	; 0x710 <xTaskGenericCreate+0x58>
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
 8b8:	bf 90       	pop	r11
 8ba:	af 90       	pop	r10
 8bc:	9f 90       	pop	r9
 8be:	8f 90       	pop	r8
 8c0:	7f 90       	pop	r7
 8c2:	6f 90       	pop	r6
 8c4:	5f 90       	pop	r5
 8c6:	4f 90       	pop	r4
 8c8:	08 95       	ret

000008ca <vTaskPrioritySet>:
 8ca:	ef 92       	push	r14
 8cc:	ff 92       	push	r15
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	ec 01       	movw	r28, r24
 8d6:	65 30       	cpi	r22, 0x05	; 5
 8d8:	08 f0       	brcs	.+2      	; 0x8dc <vTaskPrioritySet+0x12>
 8da:	64 e0       	ldi	r22, 0x04	; 4
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	0f 92       	push	r0
 8e2:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <pxCurrentTCB>
 8e6:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 8ea:	8c 17       	cp	r24, r28
 8ec:	9d 07       	cpc	r25, r29
 8ee:	11 f0       	breq	.+4      	; 0x8f4 <vTaskPrioritySet+0x2a>
 8f0:	20 97       	sbiw	r28, 0x00	; 0
 8f2:	39 f4       	brne	.+14     	; 0x902 <vTaskPrioritySet+0x38>
 8f4:	c0 91 2f 03 	lds	r28, 0x032F	; 0x80032f <pxCurrentTCB>
 8f8:	d0 91 30 03 	lds	r29, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	01 c0       	rjmp	.+2      	; 0x904 <vTaskPrioritySet+0x3a>
 902:	9e 01       	movw	r18, r28
 904:	8e 89       	ldd	r24, Y+22	; 0x16
 906:	86 17       	cp	r24, r22
 908:	09 f4       	brne	.+2      	; 0x90c <vTaskPrioritySet+0x42>
 90a:	44 c0       	rjmp	.+136    	; 0x994 <vTaskPrioritySet+0xca>
 90c:	86 17       	cp	r24, r22
 90e:	28 f4       	brcc	.+10     	; 0x91a <vTaskPrioritySet+0x50>
 910:	11 e0       	ldi	r17, 0x01	; 1
 912:	23 2b       	or	r18, r19
 914:	31 f4       	brne	.+12     	; 0x922 <vTaskPrioritySet+0x58>
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	04 c0       	rjmp	.+8      	; 0x922 <vTaskPrioritySet+0x58>
 91a:	11 e0       	ldi	r17, 0x01	; 1
 91c:	23 2b       	or	r18, r19
 91e:	09 f0       	breq	.+2      	; 0x922 <vTaskPrioritySet+0x58>
 920:	10 e0       	ldi	r17, 0x00	; 0
 922:	6e 8b       	std	Y+22, r22	; 0x16
 924:	25 e0       	ldi	r18, 0x05	; 5
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	26 1b       	sub	r18, r22
 92a:	31 09       	sbc	r19, r1
 92c:	3d 87       	std	Y+13, r19	; 0x0d
 92e:	2c 87       	std	Y+12, r18	; 0x0c
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	9c 01       	movw	r18, r24
 934:	22 0f       	add	r18, r18
 936:	33 1f       	adc	r19, r19
 938:	22 0f       	add	r18, r18
 93a:	33 1f       	adc	r19, r19
 93c:	22 0f       	add	r18, r18
 93e:	33 1f       	adc	r19, r19
 940:	82 0f       	add	r24, r18
 942:	93 1f       	adc	r25, r19
 944:	8e 5f       	subi	r24, 0xFE	; 254
 946:	9c 4f       	sbci	r25, 0xFC	; 252
 948:	2a 85       	ldd	r18, Y+10	; 0x0a
 94a:	3b 85       	ldd	r19, Y+11	; 0x0b
 94c:	28 17       	cp	r18, r24
 94e:	39 07       	cpc	r19, r25
 950:	e9 f4       	brne	.+58     	; 0x98c <vTaskPrioritySet+0xc2>
 952:	7e 01       	movw	r14, r28
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	e8 0e       	add	r14, r24
 958:	f1 1c       	adc	r15, r1
 95a:	c7 01       	movw	r24, r14
 95c:	0e 94 35 01 	call	0x26a	; 0x26a <vListRemove>
 960:	8e 89       	ldd	r24, Y+22	; 0x16
 962:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 966:	98 17       	cp	r25, r24
 968:	10 f4       	brcc	.+4      	; 0x96e <vTaskPrioritySet+0xa4>
 96a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <uxTopReadyPriority>
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	9c 01       	movw	r18, r24
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	22 0f       	add	r18, r18
 978:	33 1f       	adc	r19, r19
 97a:	22 0f       	add	r18, r18
 97c:	33 1f       	adc	r19, r19
 97e:	82 0f       	add	r24, r18
 980:	93 1f       	adc	r25, r19
 982:	b7 01       	movw	r22, r14
 984:	8e 5f       	subi	r24, 0xFE	; 254
 986:	9c 4f       	sbci	r25, 0xFC	; 252
 988:	0e 94 0e 01 	call	0x21c	; 0x21c <vListInsertEnd>
 98c:	11 30       	cpi	r17, 0x01	; 1
 98e:	11 f4       	brne	.+4      	; 0x994 <vTaskPrioritySet+0xca>
 990:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <vPortYield>
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	ff 90       	pop	r15
 9a0:	ef 90       	pop	r14
 9a2:	08 95       	ret

000009a4 <vTaskStartScheduler>:
 9a4:	af 92       	push	r10
 9a6:	bf 92       	push	r11
 9a8:	cf 92       	push	r12
 9aa:	df 92       	push	r13
 9ac:	ef 92       	push	r14
 9ae:	ff 92       	push	r15
 9b0:	0f 93       	push	r16
 9b2:	a1 2c       	mov	r10, r1
 9b4:	b1 2c       	mov	r11, r1
 9b6:	c1 2c       	mov	r12, r1
 9b8:	d1 2c       	mov	r13, r1
 9ba:	e1 2c       	mov	r14, r1
 9bc:	f1 2c       	mov	r15, r1
 9be:	00 e0       	ldi	r16, 0x00	; 0
 9c0:	20 e0       	ldi	r18, 0x00	; 0
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	45 e5       	ldi	r20, 0x55	; 85
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	6e e6       	ldi	r22, 0x6E	; 110
 9ca:	70 e0       	ldi	r23, 0x00	; 0
 9cc:	8d e4       	ldi	r24, 0x4D	; 77
 9ce:	96 e0       	ldi	r25, 0x06	; 6
 9d0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <xTaskGenericCreate>
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	49 f4       	brne	.+18     	; 0x9ea <vTaskStartScheduler+0x46>
 9d8:	f8 94       	cli
 9da:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <xSchedulerRunning>
 9de:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <xTickCount+0x1>
 9e2:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <xTickCount>
 9e6:	0e 94 c7 01 	call	0x38e	; 0x38e <xPortStartScheduler>
 9ea:	0f 91       	pop	r16
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	bf 90       	pop	r11
 9f6:	af 90       	pop	r10
 9f8:	08 95       	ret

000009fa <vTaskSuspendAll>:
 9fa:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <uxSchedulerSuspended>
 9fe:	8f 5f       	subi	r24, 0xFF	; 255
 a00:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <uxSchedulerSuspended>
 a04:	08 95       	ret

00000a06 <vTaskIncrementTick>:
 a06:	0f 93       	push	r16
 a08:	1f 93       	push	r17
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <uxSchedulerSuspended>
 a12:	81 11       	cpse	r24, r1
 a14:	b2 c0       	rjmp	.+356    	; 0xb7a <vTaskIncrementTick+0x174>
 a16:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xTickCount>
 a1a:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xTickCount+0x1>
 a1e:	01 96       	adiw	r24, 0x01	; 1
 a20:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <xTickCount+0x1>
 a24:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <xTickCount>
 a28:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xTickCount>
 a2c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xTickCount+0x1>
 a30:	89 2b       	or	r24, r25
 a32:	99 f5       	brne	.+102    	; 0xa9a <vTaskIncrementTick+0x94>
 a34:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 a38:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 a3c:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <pxOverflowDelayedTaskList>
 a40:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
 a44:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <pxDelayedTaskList+0x1>
 a48:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <pxDelayedTaskList>
 a4c:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
 a50:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <pxOverflowDelayedTaskList>
 a54:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xNumOfOverflows>
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xNumOfOverflows>
 a5e:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 a62:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 a66:	80 81       	ld	r24, Z
 a68:	81 11       	cpse	r24, r1
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <vTaskIncrementTick+0x74>
 a6c:	8f ef       	ldi	r24, 0xFF	; 255
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 a78:	10 c0       	rjmp	.+32     	; 0xa9a <vTaskIncrementTick+0x94>
 a7a:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 a7e:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 a82:	05 80       	ldd	r0, Z+5	; 0x05
 a84:	f6 81       	ldd	r31, Z+6	; 0x06
 a86:	e0 2d       	mov	r30, r0
 a88:	06 80       	ldd	r0, Z+6	; 0x06
 a8a:	f7 81       	ldd	r31, Z+7	; 0x07
 a8c:	e0 2d       	mov	r30, r0
 a8e:	82 81       	ldd	r24, Z+2	; 0x02
 a90:	93 81       	ldd	r25, Z+3	; 0x03
 a92:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 a9a:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <xTickCount>
 a9e:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <xTickCount+0x1>
 aa2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 aa6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 aaa:	28 17       	cp	r18, r24
 aac:	39 07       	cpc	r19, r25
 aae:	08 f4       	brcc	.+2      	; 0xab2 <vTaskIncrementTick+0xac>
 ab0:	69 c0       	rjmp	.+210    	; 0xb84 <vTaskIncrementTick+0x17e>
 ab2:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 ab6:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 aba:	80 81       	ld	r24, Z
 abc:	88 23       	and	r24, r24
 abe:	99 f0       	breq	.+38     	; 0xae6 <vTaskIncrementTick+0xe0>
 ac0:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 ac4:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 ac8:	05 80       	ldd	r0, Z+5	; 0x05
 aca:	f6 81       	ldd	r31, Z+6	; 0x06
 acc:	e0 2d       	mov	r30, r0
 ace:	c6 81       	ldd	r28, Z+6	; 0x06
 ad0:	d7 81       	ldd	r29, Z+7	; 0x07
 ad2:	8a 81       	ldd	r24, Y+2	; 0x02
 ad4:	9b 81       	ldd	r25, Y+3	; 0x03
 ad6:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <xTickCount>
 ada:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <xTickCount+0x1>
 ade:	28 17       	cp	r18, r24
 ae0:	39 07       	cpc	r19, r25
 ae2:	f8 f4       	brcc	.+62     	; 0xb22 <vTaskIncrementTick+0x11c>
 ae4:	19 c0       	rjmp	.+50     	; 0xb18 <vTaskIncrementTick+0x112>
 ae6:	8f ef       	ldi	r24, 0xFF	; 255
 ae8:	9f ef       	ldi	r25, 0xFF	; 255
 aea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 aee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 af2:	48 c0       	rjmp	.+144    	; 0xb84 <vTaskIncrementTick+0x17e>
 af4:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 af8:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 afc:	05 80       	ldd	r0, Z+5	; 0x05
 afe:	f6 81       	ldd	r31, Z+6	; 0x06
 b00:	e0 2d       	mov	r30, r0
 b02:	c6 81       	ldd	r28, Z+6	; 0x06
 b04:	d7 81       	ldd	r29, Z+7	; 0x07
 b06:	8a 81       	ldd	r24, Y+2	; 0x02
 b08:	9b 81       	ldd	r25, Y+3	; 0x03
 b0a:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <xTickCount>
 b0e:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <xTickCount+0x1>
 b12:	28 17       	cp	r18, r24
 b14:	39 07       	cpc	r19, r25
 b16:	28 f4       	brcc	.+10     	; 0xb22 <vTaskIncrementTick+0x11c>
 b18:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b1c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 b20:	31 c0       	rjmp	.+98     	; 0xb84 <vTaskIncrementTick+0x17e>
 b22:	8e 01       	movw	r16, r28
 b24:	0e 5f       	subi	r16, 0xFE	; 254
 b26:	1f 4f       	sbci	r17, 0xFF	; 255
 b28:	c8 01       	movw	r24, r16
 b2a:	0e 94 35 01 	call	0x26a	; 0x26a <vListRemove>
 b2e:	8c 89       	ldd	r24, Y+20	; 0x14
 b30:	9d 89       	ldd	r25, Y+21	; 0x15
 b32:	89 2b       	or	r24, r25
 b34:	21 f0       	breq	.+8      	; 0xb3e <vTaskIncrementTick+0x138>
 b36:	ce 01       	movw	r24, r28
 b38:	0c 96       	adiw	r24, 0x0c	; 12
 b3a:	0e 94 35 01 	call	0x26a	; 0x26a <vListRemove>
 b3e:	8e 89       	ldd	r24, Y+22	; 0x16
 b40:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 b44:	98 17       	cp	r25, r24
 b46:	10 f4       	brcc	.+4      	; 0xb4c <vTaskIncrementTick+0x146>
 b48:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <uxTopReadyPriority>
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	9c 01       	movw	r18, r24
 b50:	22 0f       	add	r18, r18
 b52:	33 1f       	adc	r19, r19
 b54:	22 0f       	add	r18, r18
 b56:	33 1f       	adc	r19, r19
 b58:	22 0f       	add	r18, r18
 b5a:	33 1f       	adc	r19, r19
 b5c:	82 0f       	add	r24, r18
 b5e:	93 1f       	adc	r25, r19
 b60:	b8 01       	movw	r22, r16
 b62:	8e 5f       	subi	r24, 0xFE	; 254
 b64:	9c 4f       	sbci	r25, 0xFC	; 252
 b66:	0e 94 0e 01 	call	0x21c	; 0x21c <vListInsertEnd>
 b6a:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
 b6e:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
 b72:	80 81       	ld	r24, Z
 b74:	81 11       	cpse	r24, r1
 b76:	be cf       	rjmp	.-132    	; 0xaf4 <vTaskIncrementTick+0xee>
 b78:	b6 cf       	rjmp	.-148    	; 0xae6 <vTaskIncrementTick+0xe0>
 b7a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <uxMissedTicks>
 b7e:	8f 5f       	subi	r24, 0xFF	; 255
 b80:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <uxMissedTicks>
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	1f 91       	pop	r17
 b8a:	0f 91       	pop	r16
 b8c:	08 95       	ret

00000b8e <xTaskResumeAll>:
 b8e:	cf 92       	push	r12
 b90:	df 92       	push	r13
 b92:	ef 92       	push	r14
 b94:	ff 92       	push	r15
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	0f b6       	in	r0, 0x3f	; 63
 ba0:	f8 94       	cli
 ba2:	0f 92       	push	r0
 ba4:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <uxSchedulerSuspended>
 ba8:	81 50       	subi	r24, 0x01	; 1
 baa:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <uxSchedulerSuspended>
 bae:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <uxSchedulerSuspended>
 bb2:	81 11       	cpse	r24, r1
 bb4:	64 c0       	rjmp	.+200    	; 0xc7e <xTaskResumeAll+0xf0>
 bb6:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <uxCurrentNumberOfTasks>
 bba:	81 11       	cpse	r24, r1
 bbc:	32 c0       	rjmp	.+100    	; 0xc22 <xTaskResumeAll+0x94>
 bbe:	62 c0       	rjmp	.+196    	; 0xc84 <xTaskResumeAll+0xf6>
 bc0:	d7 01       	movw	r26, r14
 bc2:	15 96       	adiw	r26, 0x05	; 5
 bc4:	ed 91       	ld	r30, X+
 bc6:	fc 91       	ld	r31, X
 bc8:	16 97       	sbiw	r26, 0x06	; 6
 bca:	c6 81       	ldd	r28, Z+6	; 0x06
 bcc:	d7 81       	ldd	r29, Z+7	; 0x07
 bce:	ce 01       	movw	r24, r28
 bd0:	0c 96       	adiw	r24, 0x0c	; 12
 bd2:	0e 94 35 01 	call	0x26a	; 0x26a <vListRemove>
 bd6:	8e 01       	movw	r16, r28
 bd8:	0e 5f       	subi	r16, 0xFE	; 254
 bda:	1f 4f       	sbci	r17, 0xFF	; 255
 bdc:	c8 01       	movw	r24, r16
 bde:	0e 94 35 01 	call	0x26a	; 0x26a <vListRemove>
 be2:	8e 89       	ldd	r24, Y+22	; 0x16
 be4:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 be8:	98 17       	cp	r25, r24
 bea:	10 f4       	brcc	.+4      	; 0xbf0 <xTaskResumeAll+0x62>
 bec:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <uxTopReadyPriority>
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	9c 01       	movw	r18, r24
 bf4:	22 0f       	add	r18, r18
 bf6:	33 1f       	adc	r19, r19
 bf8:	22 0f       	add	r18, r18
 bfa:	33 1f       	adc	r19, r19
 bfc:	22 0f       	add	r18, r18
 bfe:	33 1f       	adc	r19, r19
 c00:	82 0f       	add	r24, r18
 c02:	93 1f       	adc	r25, r19
 c04:	b8 01       	movw	r22, r16
 c06:	8e 5f       	subi	r24, 0xFE	; 254
 c08:	9c 4f       	sbci	r25, 0xFC	; 252
 c0a:	0e 94 0e 01 	call	0x21c	; 0x21c <vListInsertEnd>
 c0e:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxCurrentTCB>
 c12:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxCurrentTCB+0x1>
 c16:	9e 89       	ldd	r25, Y+22	; 0x16
 c18:	86 89       	ldd	r24, Z+22	; 0x16
 c1a:	98 17       	cp	r25, r24
 c1c:	58 f0       	brcs	.+22     	; 0xc34 <xTaskResumeAll+0xa6>
 c1e:	dc 2c       	mov	r13, r12
 c20:	09 c0       	rjmp	.+18     	; 0xc34 <xTaskResumeAll+0xa6>
 c22:	d1 2c       	mov	r13, r1
 c24:	0f 2e       	mov	r0, r31
 c26:	f3 ee       	ldi	r31, 0xE3	; 227
 c28:	ef 2e       	mov	r14, r31
 c2a:	f2 e0       	ldi	r31, 0x02	; 2
 c2c:	ff 2e       	mov	r15, r31
 c2e:	f0 2d       	mov	r31, r0
 c30:	cc 24       	eor	r12, r12
 c32:	c3 94       	inc	r12
 c34:	f7 01       	movw	r30, r14
 c36:	80 81       	ld	r24, Z
 c38:	81 11       	cpse	r24, r1
 c3a:	c2 cf       	rjmp	.-124    	; 0xbc0 <xTaskResumeAll+0x32>
 c3c:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <uxMissedTicks>
 c40:	88 23       	and	r24, r24
 c42:	81 f0       	breq	.+32     	; 0xc64 <xTaskResumeAll+0xd6>
 c44:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <uxMissedTicks>
 c48:	88 23       	and	r24, r24
 c4a:	99 f0       	breq	.+38     	; 0xc72 <xTaskResumeAll+0xe4>
 c4c:	0e 94 03 05 	call	0xa06	; 0xa06 <vTaskIncrementTick>
 c50:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <uxMissedTicks>
 c54:	81 50       	subi	r24, 0x01	; 1
 c56:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <uxMissedTicks>
 c5a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <uxMissedTicks>
 c5e:	81 11       	cpse	r24, r1
 c60:	f5 cf       	rjmp	.-22     	; 0xc4c <xTaskResumeAll+0xbe>
 c62:	07 c0       	rjmp	.+14     	; 0xc72 <xTaskResumeAll+0xe4>
 c64:	f1 e0       	ldi	r31, 0x01	; 1
 c66:	df 16       	cp	r13, r31
 c68:	21 f0       	breq	.+8      	; 0xc72 <xTaskResumeAll+0xe4>
 c6a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <xMissedYield>
 c6e:	81 30       	cpi	r24, 0x01	; 1
 c70:	41 f4       	brne	.+16     	; 0xc82 <xTaskResumeAll+0xf4>
 c72:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <xMissedYield>
 c76:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <vPortYield>
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	03 c0       	rjmp	.+6      	; 0xc84 <xTaskResumeAll+0xf6>
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <xTaskResumeAll+0xf6>
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	0f 90       	pop	r0
 c86:	0f be       	out	0x3f, r0	; 63
 c88:	df 91       	pop	r29
 c8a:	cf 91       	pop	r28
 c8c:	1f 91       	pop	r17
 c8e:	0f 91       	pop	r16
 c90:	ff 90       	pop	r15
 c92:	ef 90       	pop	r14
 c94:	df 90       	pop	r13
 c96:	cf 90       	pop	r12
 c98:	08 95       	ret

00000c9a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c9a:	0a ed       	ldi	r16, 0xDA	; 218
 c9c:	12 e0       	ldi	r17, 0x02	; 2
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c9e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <uxTasksDeleted>
 ca2:	88 23       	and	r24, r24
 ca4:	e1 f3       	breq	.-8      	; 0xc9e <prvIdleTask+0x4>
		{
			vTaskSuspendAll();
 ca6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 caa:	d8 01       	movw	r26, r16
 cac:	cc 91       	ld	r28, X
			xTaskResumeAll();
 cae:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 cb2:	cc 23       	and	r28, r28
 cb4:	a1 f3       	breq	.-24     	; 0xc9e <prvIdleTask+0x4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 cb6:	0f b6       	in	r0, 0x3f	; 63
 cb8:	f8 94       	cli
 cba:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 cbc:	d8 01       	movw	r26, r16
 cbe:	15 96       	adiw	r26, 0x05	; 5
 cc0:	ed 91       	ld	r30, X+
 cc2:	fc 91       	ld	r31, X
 cc4:	16 97       	sbiw	r26, 0x06	; 6
 cc6:	c6 81       	ldd	r28, Z+6	; 0x06
 cc8:	d7 81       	ldd	r29, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 cca:	ce 01       	movw	r24, r28
 ccc:	02 96       	adiw	r24, 0x02	; 2
 cce:	0e 94 35 01 	call	0x26a	; 0x26a <vListRemove>
					--uxCurrentNumberOfTasks;
 cd2:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <uxCurrentNumberOfTasks>
 cd6:	81 50       	subi	r24, 0x01	; 1
 cd8:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 cdc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <uxTasksDeleted>
 ce0:	81 50       	subi	r24, 0x01	; 1
 ce2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 ce6:	0f 90       	pop	r0
 ce8:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 cea:	8f 89       	ldd	r24, Y+23	; 0x17
 cec:	98 8d       	ldd	r25, Y+24	; 0x18
 cee:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
		vPortFree( pxTCB );
 cf2:	ce 01       	movw	r24, r28
 cf4:	0e 94 6f 00 	call	0xde	; 0xde <vPortFree>
 cf8:	d2 cf       	rjmp	.-92     	; 0xc9e <prvIdleTask+0x4>

00000cfa <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 cfa:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <uxSchedulerSuspended>
 cfe:	81 11       	cpse	r24, r1
 d00:	13 c0       	rjmp	.+38     	; 0xd28 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d02:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	fc 01       	movw	r30, r24
 d0a:	ee 0f       	add	r30, r30
 d0c:	ff 1f       	adc	r31, r31
 d0e:	ee 0f       	add	r30, r30
 d10:	ff 1f       	adc	r31, r31
 d12:	ee 0f       	add	r30, r30
 d14:	ff 1f       	adc	r31, r31
 d16:	8e 0f       	add	r24, r30
 d18:	9f 1f       	adc	r25, r31
 d1a:	fc 01       	movw	r30, r24
 d1c:	ee 5f       	subi	r30, 0xFE	; 254
 d1e:	fc 4f       	sbci	r31, 0xFC	; 252
 d20:	80 81       	ld	r24, Z
 d22:	88 23       	and	r24, r24
 d24:	29 f0       	breq	.+10     	; 0xd30 <vTaskSwitchContext+0x36>
 d26:	1b c0       	rjmp	.+54     	; 0xd5e <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d28:	81 e0       	ldi	r24, 0x01	; 1
 d2a:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <xMissedYield>
 d2e:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d30:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 d34:	81 50       	subi	r24, 0x01	; 1
 d36:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d3a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	fc 01       	movw	r30, r24
 d42:	ee 0f       	add	r30, r30
 d44:	ff 1f       	adc	r31, r31
 d46:	ee 0f       	add	r30, r30
 d48:	ff 1f       	adc	r31, r31
 d4a:	ee 0f       	add	r30, r30
 d4c:	ff 1f       	adc	r31, r31
 d4e:	8e 0f       	add	r24, r30
 d50:	9f 1f       	adc	r25, r31
 d52:	fc 01       	movw	r30, r24
 d54:	ee 5f       	subi	r30, 0xFE	; 254
 d56:	fc 4f       	sbci	r31, 0xFC	; 252
 d58:	80 81       	ld	r24, Z
 d5a:	88 23       	and	r24, r24
 d5c:	49 f3       	breq	.-46     	; 0xd30 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d5e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <uxTopReadyPriority>
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	9c 01       	movw	r18, r24
 d66:	22 0f       	add	r18, r18
 d68:	33 1f       	adc	r19, r19
 d6a:	22 0f       	add	r18, r18
 d6c:	33 1f       	adc	r19, r19
 d6e:	22 0f       	add	r18, r18
 d70:	33 1f       	adc	r19, r19
 d72:	28 0f       	add	r18, r24
 d74:	39 1f       	adc	r19, r25
 d76:	d9 01       	movw	r26, r18
 d78:	ae 5f       	subi	r26, 0xFE	; 254
 d7a:	bc 4f       	sbci	r27, 0xFC	; 252
 d7c:	11 96       	adiw	r26, 0x01	; 1
 d7e:	ed 91       	ld	r30, X+
 d80:	fc 91       	ld	r31, X
 d82:	12 97       	sbiw	r26, 0x02	; 2
 d84:	02 80       	ldd	r0, Z+2	; 0x02
 d86:	f3 81       	ldd	r31, Z+3	; 0x03
 d88:	e0 2d       	mov	r30, r0
 d8a:	12 96       	adiw	r26, 0x02	; 2
 d8c:	fc 93       	st	X, r31
 d8e:	ee 93       	st	-X, r30
 d90:	11 97       	sbiw	r26, 0x01	; 1
 d92:	2b 5f       	subi	r18, 0xFB	; 251
 d94:	3c 4f       	sbci	r19, 0xFC	; 252
 d96:	e2 17       	cp	r30, r18
 d98:	f3 07       	cpc	r31, r19
 d9a:	29 f4       	brne	.+10     	; 0xda6 <vTaskSwitchContext+0xac>
 d9c:	22 81       	ldd	r18, Z+2	; 0x02
 d9e:	33 81       	ldd	r19, Z+3	; 0x03
 da0:	fd 01       	movw	r30, r26
 da2:	32 83       	std	Z+2, r19	; 0x02
 da4:	21 83       	std	Z+1, r18	; 0x01
 da6:	fc 01       	movw	r30, r24
 da8:	ee 0f       	add	r30, r30
 daa:	ff 1f       	adc	r31, r31
 dac:	ee 0f       	add	r30, r30
 dae:	ff 1f       	adc	r31, r31
 db0:	ee 0f       	add	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	8e 0f       	add	r24, r30
 db6:	9f 1f       	adc	r25, r31
 db8:	fc 01       	movw	r30, r24
 dba:	ee 5f       	subi	r30, 0xFE	; 254
 dbc:	fc 4f       	sbci	r31, 0xFC	; 252
 dbe:	01 80       	ldd	r0, Z+1	; 0x01
 dc0:	f2 81       	ldd	r31, Z+2	; 0x02
 dc2:	e0 2d       	mov	r30, r0
 dc4:	86 81       	ldd	r24, Z+6	; 0x06
 dc6:	97 81       	ldd	r25, Z+7	; 0x07
 dc8:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <pxCurrentTCB+0x1>
 dcc:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <pxCurrentTCB>
 dd0:	08 95       	ret

00000dd2 <memset>:
 dd2:	dc 01       	movw	r26, r24
 dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <memset+0x6>
 dd6:	6d 93       	st	X+, r22
 dd8:	41 50       	subi	r20, 0x01	; 1
 dda:	50 40       	sbci	r21, 0x00	; 0
 ddc:	e0 f7       	brcc	.-8      	; 0xdd6 <memset+0x4>
 dde:	08 95       	ret

00000de0 <strncpy>:
 de0:	fb 01       	movw	r30, r22
 de2:	dc 01       	movw	r26, r24
 de4:	41 50       	subi	r20, 0x01	; 1
 de6:	50 40       	sbci	r21, 0x00	; 0
 de8:	48 f0       	brcs	.+18     	; 0xdfc <strncpy+0x1c>
 dea:	01 90       	ld	r0, Z+
 dec:	0d 92       	st	X+, r0
 dee:	00 20       	and	r0, r0
 df0:	c9 f7       	brne	.-14     	; 0xde4 <strncpy+0x4>
 df2:	01 c0       	rjmp	.+2      	; 0xdf6 <strncpy+0x16>
 df4:	1d 92       	st	X+, r1
 df6:	41 50       	subi	r20, 0x01	; 1
 df8:	50 40       	sbci	r21, 0x00	; 0
 dfa:	e0 f7       	brcc	.-8      	; 0xdf4 <strncpy+0x14>
 dfc:	08 95       	ret

00000dfe <_exit>:
 dfe:	f8 94       	cli

00000e00 <__stop_program>:
 e00:	ff cf       	rjmp	.-2      	; 0xe00 <__stop_program>
